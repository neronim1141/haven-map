type Tile {
  x: Int!
  y: Int!
  lastUpdated: String!
  z: Int!
  mapId: Int!
}
type Coord {
  x: Int!
  y: Int!
}
type MapMerge {
  from: Int!
  to: Int!
  shift: Coord!
}
type Map {
  id: Int!
  name: String
  hidden: Boolean!
}
type Marker {
  id: Int!
  name: String!
  x: Int!
  y: Int!
  mapId: Int!
  hidden: Boolean!
  image: String
  type: String!
}
type Character {
  id: String!
  name: String!
  type: String!
  inMap: Int!
  expire: Float!
  x: Int!
  y: Int!
}

type User {
  name: String!
  role: String!
  token: String!
}
input CoordInput {
  x: Int!
  y: Int!
}

type Query {
  maps(hidden: Boolean!): [Map!]!
  markers(hidden: Boolean!): [Marker!]!
  users: [User!]!
  user(name: String!): User
}

type Subscription {
  mapUpdates(id: Int!): [Tile!]!
  mapMerges: MapMerge!
  characters: [Character!]!
}

type Mutation {
  shiftCoord(mapId: Int!, shiftBy: CoordInput!): Boolean!
  rebuildZooms(mapId: Int!): Boolean!
  deleteMap(mapId: Int!): Boolean!
  hideMap(mapId: Int!): Boolean!
  createUser(name: String!, password: String!): String!
  deleteUser(name: String!): String!
  assignRole(name: String!, role: String!): String!
  changePassword(
    name: String!
    password: String!
    newPassword: String!
  ): String!
}
